->Fetching and showing all the 5000 photos but 100 at a time, on scroll load next 100 should load

1.FrontEnd part
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Photo Gallery</title>
    <style>
     
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }
        
        #photo-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            box-sizing: border-box;
            overflow-y: scroll;
            height: 400px;
        }
        
        ul {
            list-style: none;
            padding: 0;
        }
        
        li {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-bottom: 20px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
        
        img {
            max-width: 100px;
            max-height: 100px;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div id="photo-container">
        <ul id="photo-list">
       
        </ul>
    </div>

    <script>
        let currentPage = 1;
        const pageSize = 100;
        let loading = false;

        function loadPhotos(page) {
            if (loading) return;

            loading = true;
            fetch(`/api/photos/${page}`)
                .then(response => response.json())
                .then(photos => {
                    const photoList = document.getElementById('photo-list');
                    photos.forEach(photo => {
                        const listItem = document.createElement('li');
                        listItem.innerHTML = `
                            <img src="${photo.thumbnailUrl}" alt="${photo.title}">
                            <p><strong>User ID:</strong> ${photo.userId}</p>
                            <p><strong>ID:</strong> ${photo.id}</p>
                            <p><strong>Title:</strong> ${photo.title}</p>
                            <p><strong>Body:</strong> ${photo.body}</p>
                        `;
                        photoList.appendChild(listItem);
                    });
                    currentPage++;
                    loading = false;
                })
                .catch(error => console.error(error));
        }

        function checkScroll() {
            const photoContainer = document.getElementById('photo-container');
            if (photoContainer.scrollTop + photoContainer.clientHeight >= photoContainer.scrollHeight) {
                loadPhotos(currentPage);
            }
        }

       
        const photoContainer = document.getElementById('photo-container');
        photoContainer.addEventListener('scroll', checkScroll);

        loadPhotos(currentPage);
    </script>
</body>
</html>

2.Entity class

@Entity
@Table(name = "photos")
public class Photo {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private Long userId; 
    private String title;
    private String body; 
    private String url;
    private String thumbnailUrl;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getBody() {
        return body;
    }

    public void setBody(String body) {
        this.body = body;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getThumbnailUrl() {
        return thumbnailUrl;
    }

    public void setThumbnailUrl(String thumbnailUrl) {
        this.thumbnailUrl = thumbnailUrl;
    }

    @Override
    public String toString() {
        return "Photo [id=" + id + ", userId=" + userId + ", title=" + title + ", body=" + body
                + ", url=" + url + ", thumbnailUrl=" + thumbnailUrl + "]";
    }
}

3.Repository class
public interface PhotoRepository extends JpaRepository<Photo, Long> {
}

4.Service layer
@Service
public class PhotoService {
    @Autowired
    private PhotoRepository photoRepository;

    public List<Photo> getPhotos(int page, int pageSize) {
        Pageable pageable = PageRequest.of(page - 1, pageSize);
        Page<Photo> photoPage = photoRepository.findAll(pageable);
        return photoPage.getContent();
    }
}

5.Controller Class
@RestController
@RequestMapping("/api/photos")
public class PhotoController {
    @Autowired
    private PhotoService photoService;

    @GetMapping("/{page}")
    public List<Photo> getPhotos(@PathVariable int page) {
        int pageSize = 100;
        return photoService.getPhotos(page, pageSize);
    }
}


->Database Code

CREATE DATABASE photo_gallery;
USE photo_gallery;

CREATE TABLE photos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    album_id INT,
    title VARCHAR(255),
    url VARCHAR(255),
    thumbnail_url VARCHAR(255)
);

